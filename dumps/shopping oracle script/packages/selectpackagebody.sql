CREATE OR REPLACE PACKAGE BODY C##BIGDATA.SELECTPACKAGE
AS
PROCEDURE SHOWPRODUCTS(PRODUCT OUT SYS_REFCURSOR)
IS
BEGIN
OPEN PRODUCT FOR
SELECT P.ID,P.NAME,P.PICTURE,P.PRICE,P.BONUCE_VALUE,P.IMPORTED_DATE,P.ACTIVE,D.ID DICID, D.DICT_VALUE FROM PRODUCTS_ON_SALE P
INNER JOIN DICTIONARY D ON D.ID=P.CATEGORY  WHERE P.ACTIVE=1;
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line ('<SHOWPRODUCTS message>' || SQLERRM); 
END SHOWPRODUCTS;


PROCEDURE SHOWPRODUCTSORDERBY(PRODUCT OUT SYS_REFCURSOR)
IS
BEGIN
OPEN PRODUCT FOR
SELECT P.ID,P.NAME,P.PICTURE,P.PRICE,P.BONUCE_VALUE,P.IMPORTED_DATE,P.ACTIVE FROM PRODUCTS_ON_SALE P WHERE P.ACTIVE=1 ORDER BY P.IMPORTED_DATE ASC;
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line ('<SHOWPRODUCTS message>' || SQLERRM); 
END SHOWPRODUCTSORDERBY;


PROCEDURE SHOWFULLORDEREDLISTS(ALL_OUT OUT SYS_REFCURSOR)
IS
  BEGIN
  OPEN ALL_OUT FOR
  SELECT RC.ID CH_ID,LTP.ID LTP_ID,LTP.NAME LTP_NAME,LTP.SURNAME LTP_SURNAME,LTP.EMAIL LTP_EMAIL,PT.ADDRESS PT_ADDRESS,PT.ORDER_DATE PT_DATE
  ,PT.LAST_DATE_OF_DELIVERY PT_DELDATE,PT.MOBILE PT_MOBILE,PT.MOBILE2 PT_MOBILE2,POS.NAME POS_NAME,RC.ORDER_COUNT RC_COUNT,RC.ACTIVE RC_ACTIVE FROM RECEIVENT RC 
  INNER JOIN LOGIN_TABLE_PRIMARY LTP ON RC.ORDERS_ID=LTP.ID
  INNER JOIN PRIMARY_TABLE PT ON PT.PRIMARY_ID=RC.ORDERS_ID
  INNER JOIN PRODUCTS_ON_SALE POS ON RC.PRODUCT_ID=POS.ID WHERE RC.ACTIVE=1;
  
  END SHOWFULLORDEREDLISTS;
PROCEDURE SHOWCUSTOMERS(CUSTOMERS OUT SYS_REFCURSOR)
IS
BEGIN
OPEN CUSTOMERS FOR
SELECT L.ID,L.NAME,L.SURNAME,L.EMAIL,L.LOGIN_DATE,L.TASK,L.ACTIVE FROM LOGIN_TABLE_PRIMARY L WHERE L.ACTIVE=1;
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line ('<SHOWCUSTOMERS message>' || SQLERRM);
END SHOWCUSTOMERS;

PROCEDURE BONUCELIST(BONUCE OUT SYS_REFCURSOR)
IS
BEGIN
OPEN BONUCE FOR
SELECT B.PRIMARY_ID,L.NAME,L.SURNAME,L.EMAIL,B.BONUCE_NAME,B.BONUCE_QUONTITY,B.OPEN_BONUCE_DATE,B.ACTIVE FROM LOGIN_TABLE_PRIMARY L
LEFT JOIN BONUS_TABLE B ON L.ID=B.PRIMARY_ID WHERE L.ACTIVE=1 AND B.ACTIVE=1;
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line ('<BONUCELIST message>' || SQLERRM);
END BONUCELIST;

PROCEDURE BONUCELISTORDERBY(BONUCE OUT SYS_REFCURSOR)
IS
BEGIN
OPEN BONUCE FOR
SELECT B.PRIMARY_ID,L.NAME,L.SURNAME,L.EMAIL,B.BONUCE_NAME,B.BONUCE_QUONTITY,B.OPEN_BONUCE_DATE,B.ACTIVE FROM LOGIN_TABLE_PRIMARY L
LEFT JOIN BONUS_TABLE B ON L.ID=B.PRIMARY_ID WHERE L.ACTIVE=1 AND B.ACTIVE=1 ORDER BY B.OPEN_BONUCE_DATE ASC;
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line ('<BONUCELIST message>' || SQLERRM);
END BONUCELISTORDERBY;




PROCEDURE SENDALLCUSTOMERMAIL (MAIL OUT SYS_REFCURSOR) 
IS 
BEGIN
OPEN MAIL FOR
SELECT ID,EMAIL FROM LOGIN_TABLE_PRIMARY WHERE ACTIVE=1 AND EMAIL_ACTIVE=1;
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line ('<SENDALLCUSTOMERMAIL message>' || SQLERRM);
END SENDALLCUSTOMERMAIL;

PROCEDURE SENDOLDCUSTOMERMAIL (MAIL OUT SYS_REFCURSOR)
IS 
BEGIN
OPEN MAIL FOR
SELECT ID,EMAIL FROM LOGIN_TABLE_PRIMARY WHERE ACTIVE=1 AND OLD_USER_ACTIVE=1;
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line ('<SENDALLCUSTOMERMAIL message>' || SQLERRM);
END SENDOLDCUSTOMERMAIL;


PROCEDURE SENDOLDTWOMONTHCUSTOMERMAIL (MAIL OUT SYS_REFCURSOR)
IS 
BEGIN
OPEN MAIL FOR
SELECT ID,EMAIL FROM LOGIN_TABLE_PRIMARY WHERE ACTIVE=1 AND OLD_USER_ACTIVE=0;
EXCEPTION
WHEN OTHERS
THEN
DBMS_OUTPUT.put_line ('<SENDALLCUSTOMERMAIL message>' || SQLERRM);
END SENDOLDTWOMONTHCUSTOMERMAIL ;


PROCEDURE CUSTOMERSORDERBY(CUSTOMERS OUT SYS_REFCURSOR)
IS
BEGIN
OPEN CUSTOMERS FOR
SELECT L.ID,L.NAME,L.SURNAME,L.EMAIL,L.LOGIN_DATE,L.TASK,L.ACTIVE FROM LOGIN_TABLE_PRIMARY L WHERE L.ACTIVE=1 ORDER BY L.LOGIN_DATE ASC;
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line ('<CUSTOMERSORDERBY message>' || SQLERRM);
END CUSTOMERSORDERBY;

PROCEDURE SHOWORDEREDORDERBYLIST(SHOWS OUT SYS_REFCURSOR)
IS 
BEGIN
OPEN SHOWS FOR
 SELECT RC.ID CH_ID,LTP.ID LTP_ID,LTP.NAME LTP_NAME,LTP.SURNAME LTP_SURNAME,LTP.EMAIL LTP_EMAIL,PT.ADDRESS PT_ADDRESS,PT.ORDER_DATE PT_DATE
  ,PT.LAST_DATE_OF_DELIVERY PT_DELDATE,PT.MOBILE PT_MOBILE,PT.MOBILE2 PT_MOBILE2,POS.NAME POS_NAME,RC.ORDER_COUNT RC_COUNT,RC.ACTIVE RC_ACTIVE
   FROM RECEIVENT RC 
  INNER JOIN LOGIN_TABLE_PRIMARY LTP ON RC.ORDERS_ID=LTP.ID
  INNER JOIN PRIMARY_TABLE PT ON PT.PRIMARY_ID=RC.ORDERS_ID
  INNER JOIN PRODUCTS_ON_SALE POS ON RC.PRODUCT_ID=POS.ID WHERE RC.ACTIVE=1  ORDER BY PT.ORDER_DATE ASC;
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line ('<SHOWORDEREDLIST message>' || SQLERRM); 
END SHOWORDEREDORDERBYLIST;

PROCEDURE ORDEREDDELIVERYDATEORDERBYLIST(SHOWS OUT SYS_REFCURSOR)
IS 
BEGIN
OPEN SHOWS FOR
 SELECT RC.ID CH_ID,LTP.ID LTP_ID,LTP.NAME LTP_NAME,LTP.SURNAME LTP_SURNAME,LTP.EMAIL LTP_EMAIL,PT.ADDRESS PT_ADDRESS,PT.ORDER_DATE PT_DATE
  ,PT.LAST_DATE_OF_DELIVERY PT_DELDATE,PT.MOBILE PT_MOBILE,PT.MOBILE2 PT_MOBILE2,POS.NAME POS_NAME,RC.ORDER_COUNT RC_COUNT,RC.ACTIVE RC_ACTIVE
   FROM RECEIVENT RC 
  INNER JOIN LOGIN_TABLE_PRIMARY LTP ON RC.ORDERS_ID=LTP.ID
  INNER JOIN PRIMARY_TABLE PT ON PT.PRIMARY_ID=RC.ORDERS_ID
  INNER JOIN PRODUCTS_ON_SALE POS ON RC.PRODUCT_ID=POS.ID WHERE  RC.ACTIVE=1 ORDER BY PT.LAST_DATE_OF_DELIVERY ASC;
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line ('<SHOWORDEREDLIST message>' || SQLERRM); 
END ORDEREDDELIVERYDATEORDERBYLIST;

FUNCTION SENDCUSTOMERMAIL(BYID IN LOGIN_TABLE_PRIMARY.ID%TYPE)
RETURN SYS_REFCURSOR
IS 
MAIL  SYS_REFCURSOR;
BEGIN 
OPEN MAIL FOR
SELECT EMAIL FROM LOGIN_TABLE_PRIMARY WHERE ID=BYID;
RETURN MAIL;
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line ('<SENDALLCUSTOMERMAIL message>' || SQLERRM);

END SENDCUSTOMERMAIL;

FUNCTION SHOWPICTURE(BYID IN LOGIN_TABLE_PRIMARY.ID%TYPE) 
RETURN SYS_REFCURSOR
IS 
PICTURES SYS_REFCURSOR;
BEGIN
OPEN PICTURES FOR
SELECT PC.NAME,PP.PRODUCT_PATH FROM PRODUCTS_ON_SALE PC
INNER JOIN PRODUCT_PICTURE PP ON PC.ID=PP.PRODUCT_ID WHERE PP.PRODUCT_ID=BYID;
RETURN PICTURES;
END SHOWPICTURE;
PROCEDURE CHARTSHOW(PRODUCT OUT SYS_REFCURSOR)
IS 
BEGIN
OPEN PRODUCT FOR
select NAME FROM PRODUCTS_ON_SALE; 
--select p.name,TO_CHAR(R.ORDER_DATE, 'MONTH') AY,SUM (R.ORDER_COUNT) CEM,TO_CHAR(R.ORDER_DATE,'MM') GUN from receivent r 
--inner join products_on_sale p on p.ID=r.ORDERS_ID group by (p.name,TO_CHAR(R.ORDER_DATE, 'MONTH'),TO_CHAR(R.ORDER_DATE,'MM')) order by TO_CHAR(R.ORDER_DATE,'MM') asc;
END CHARTSHOW;
PROCEDURE CHARTNAME(PRODUCT OUT SYS_REFCURSOR)
IS
BEGIN
OPEN PRODUCT FOR
select TO_CHAR(R.ORDER_DATE, 'MONTH') AY,SUM (R.ORDER_COUNT) CEM,TO_CHAR(R.ORDER_DATE,'MM') GUN from receivent r 
group by (TO_CHAR(R.ORDER_DATE, 'MONTH'),TO_CHAR(R.ORDER_DATE,'MM')) order by TO_CHAR(R.ORDER_DATE,'MM') asc;
END CHARTNAME;

--PROCEDURE CHARTD(PRODUCT OUT SYS_REFCURSOR)
--IS
--BEGIN
--OPEN PRODUCT FOR
--select TO_CHAR(R.ORDER_DATE, 'MONTH') AY,SUM (R.ORDER_COUNT) CEM,TO_CHAR(R.ORDER_DATE,'MM') GUN from receivent r 
--group by (TO_CHAR(R.ORDER_DATE, 'MONTH'),TO_CHAR(R.ORDER_DATE,'MM')) order by TO_CHAR(R.ORDER_DATE,'MM') asc;
--END CHARTD;
END SELECTPACKAGE;
/
